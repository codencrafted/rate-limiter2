apiVersion: apps/v1
kind: Deployment
metadata:
  name: rate-limiter
  labels:
    app: rate-limiter
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rate-limiter
      component: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: rate-limiter
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9091"
    spec:
      serviceAccountName: rate-limiter
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
      containers:
      - name: rate-limiter
        image: rate-limiter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: metrics
          containerPort: 9091
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: RATELIMITER_HTTP_ADDRESS
          value: ":8080"
        - name: RATELIMITER_GRPC_ADDRESS
          value: ":9090"
        - name: RATELIMITER_METRICS_ADDRESS
          value: ":9091"
        - name: RATELIMITER_LOGGING_LEVEL
          value: "info"
        - name: RATELIMITER_LOGGING_FORMAT
          value: "json"
        - name: RATELIMITER_REDIS_ADDRESSES
          value: "redis-master:6379"
        - name: RATELIMITER_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: redis-password
        - name: RATELIMITER_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: jwt-secret
        - name: RATELIMITER_API_KEYS
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: api-keys
        - name: RATELIMITER_BASIC_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: basic-auth-username
        - name: RATELIMITER_BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: basic-auth-password
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 10
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config-volume
          mountPath: /etc/ratelimiter
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config-volume
        configMap:
          name: rate-limiter-config
---
apiVersion: v1
kind: Service
metadata:
  name: rate-limiter
  labels:
    app: rate-limiter
spec:
  selector:
    app: rate-limiter
    component: api
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: grpc
    protocol: TCP
  - name: metrics
    port: 9091
    targetPort: metrics
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rate-limiter-config
  labels:
    app: rate-limiter
data:
  config.yaml: |
    http:
      address: ":8080"
      read_timeout: 5s
      write_timeout: 10s
      shutdown_timeout: 30s
      max_header_bytes: 1048576
      enable_cors: true
      enable_compression: true
    
    grpc:
      address: ":9090"
      shutdown_timeout: 30s
      max_recv_msg_size: 4194304
      max_send_msg_size: 4194304
    
    redis:
      pool_size: 100
      min_idle_conns: 10
      max_retries: 3
      dial_timeout: 200ms
      read_timeout: 500ms
      write_timeout: 500ms
      pool_timeout: 1s
    
    rate_limiter:
      default_limits:
        second:
          requests: 10
          window: 1s
        minute:
          requests: 100
          window: 1m
        hour:
          requests: 1000
          window: 1h
        day:
          requests: 10000
          window: 24h
      circuit_breaker_threshold: 5
      circuit_breaker_timeout: 10s
      local_cache_enabled: true
      local_cache_size: 10000
      local_cache_ttl: 1m
    
    metrics:
      enabled: true
      address: ":9091"
      path: "/metrics"
      enable_go_stats: true
    
    logging:
      level: "info"
      format: "json"
      output: "stdout"
      enable_caller: true
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rate-limiter
  labels:
    app: rate-limiter
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rate-limiter
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rate-limiter
  labels:
    app: rate-limiter
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: rate-limiter
      component: api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rate-limiter-network-policy
  labels:
    app: rate-limiter
spec:
  podSelector:
    matchLabels:
      app: rate-limiter
      component: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: default
    - podSelector:
        matchLabels:
          app: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9091
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379 