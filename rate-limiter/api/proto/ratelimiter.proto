syntax = "proto3";

package ratelimiter;

option go_package = "github.com/distributed/ratelimiter/api/proto";

// RateLimiterService defines the gRPC service for rate limiting
service RateLimiterService {
  // CheckRateLimit checks if a request should be rate limited
  rpc CheckRateLimit(CheckRateLimitRequest) returns (CheckRateLimitResponse) {}
  
  // UpdateWhitelist adds or removes a key from the whitelist
  rpc UpdateWhitelist(UpdateWhitelistRequest) returns (UpdateWhitelistResponse) {}
  
  // SetLimit sets a custom limit for a key
  rpc SetLimit(SetLimitRequest) returns (SetLimitResponse) {}
}

// CheckRateLimitRequest is the request for CheckRateLimit
message CheckRateLimitRequest {
  string key = 1;
  string identifier = 2;
  string window = 3;
}

// CheckRateLimitResponse is the response for CheckRateLimit
message CheckRateLimitResponse {
  bool limited = 1;
  int64 current_count = 2;
  int32 limit = 3;
  int32 remaining = 4;
  double reset_after = 5;
  string window = 6;
}

// UpdateWhitelistRequest is the request for UpdateWhitelist
message UpdateWhitelistRequest {
  string key = 1;
  string identifier = 2;
  bool whitelisted = 3;
}

// UpdateWhitelistResponse is the response for UpdateWhitelist
message UpdateWhitelistResponse {
  bool success = 1;
}

// SetLimitRequest is the request for SetLimit
message SetLimitRequest {
  string key = 1;
  string identifier = 2;
  string window = 3;
  int32 limit = 4;
}

// SetLimitResponse is the response for SetLimit
message SetLimitResponse {
  bool success = 1;
} 